ext.publishing = [:]
ext.publishing.bintray = [:]

ext.publishing.artifactId =  project.name.toLowerCase()
ext.publishing.groupId    =  'eu.mihosoft.jfx.scaledfx'
ext.publishing.versionId  =  '0.1'

ext.publishing.developerName         = 'Michael Hoffer'
ext.publishing.developerAlias        = 'miho'
ext.publishing.developerEmail        = 'info@michaelhoffer.de'
ext.publishing.bintray.name          = project.name
ext.publishing.inceptionYear         = '2016'
ext.publishing.bintray.repo          = 'ScaledFX'
ext.publishing.bintray.userORg       = 'miho'
ext.publishing.pomName               =  ext.publishing.artifactId
ext.publishing.desc                  = 'JavaFX Pane for scaling arbitrary content nodes.'
ext.publishing.license               = 'BSD 2-Clause'
ext.publishing.licenseUrl            = 'https://github.com/miho/JCSG/blob/master/LICENSE.txt'
ext.publishing.labels                = ['javafx', 'java', 'vworkflows', 'vrl']
ext.publishing.websiteUrl            = 'https://github.com/miho/ScaledFX/wiki'
ext.publishing.issueTrackerUrl       = 'https://github.com/miho/ScaledFX/issues'
ext.publishing.vcsUrl                = 'git@github.com:miho/ScaledFX.git'

//apply plugin: 'maven-publish'
//apply plugin: 'com.jfrog.bintray'
//apply plugin: 'net.nemerosa.versioning'



task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// create one jar for the source files
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}
Date buildTimeAndDate = new Date()
ext {
    buildDate = new java.text.SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new java.text.SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

jar {
   
    manifest {
    
        attributes(
          'Built-By': System.properties['user.name'],
          'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
          'Build-Date': project.buildDate,
          'Build-Time': project.buildTime,
          'Build-Revision': versioning.info.commit,
          'Specification-Title': project.name,
          'Specification-Version': project.version,
          'Implementation-Title': project.name,
          'Implementation-Version': project.version
        )
    }
}


def pomConfig = {
    name ext.publishing.pomName
    description ext.publishing.desc
    url ext.publishing.websiteUrl
    inceptionYear ext.publishing.inceptionYear
    licenses {
        license([:]) {
            name ext.publishing.license
            url ext.publishing.licenseUrl
            distribution 'repo'
        }
    }
    scm {
        url ext.publishing.vcsUrl
        connection ext.publishing.vcsUrl
        developerConnection ext.publishing.vcsUrl
    }
    developers {
        developer {
            id ext.publishing.developerNameAlias
            name ext.publishing.developerName
        }
    }
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            groupId publishing.groupId
            artifactId publishing.artifactId
            version publishing.versionId
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode 'description', publishing.desc
                root.children().last() + pomConfig
            }
        }
    }
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
if (!project.hasProperty('bintrayApiKey')) ext.bintrayApiKey = ''

bintray {
    user = project.bintrayUsername
    key = project.bintrayApiKey
    publications = ['mavenCustom']
    pkg {
        repo                  = publishing.bintray.repo
        userOrg               = publishing.bintray.userORg
        name                  = publishing.bintray.name
        desc                  = publishing.desc
        licenses              = [publishing.license]
        labels                = publishing.labels
        websiteUrl            = publishing.websiteUrl
        issueTrackerUrl       = publishing.issueTrackerUrl
        vcsUrl                = publishing.vcsUrl
        publicDownloadNumbers = true
        version {
            name              = publishing.versionId
            vcsTag            = 'v' + publishing.versionId
        }
    }
}